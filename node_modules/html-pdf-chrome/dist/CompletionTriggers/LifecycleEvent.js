'use strict';
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _LifecycleEvent_eventPromise;
Object.defineProperty(exports, "__esModule", { value: true });
exports.LifecycleEvent = void 0;
const CompletionTrigger_1 = require("./CompletionTrigger");
/**
 * Waits for a Chrome page lifecycle event.
 * Some examples include:
 *  - init
 *  - DOMContentLoaded
 *  - load
 *  - firstPaint
 *  - firstContentfulPaint
 *  - firstMeaningfulPaintCandidate
 *  - networkAlmostIdle
 *  - firstMeaningfulPaint
 *  - networkIdle
 *
 * @export
 * @class LifecycleEvent
 * @extends {CompletionTrigger}
 */
class LifecycleEvent extends CompletionTrigger_1.CompletionTrigger {
    /**
     * Creates an instance of the LifecycleEvent CompletionTrigger.
     * @param {string} [eventName] the name of the event to listen for.
     *  Defaults to `firstMeaningfulPaint`.
     * @param {number} [timeout] ms to wait until timing out.
     * @memberof LifecycleEvent
     */
    constructor(eventName, timeout) {
        super(timeout);
        this.eventName = eventName;
        _LifecycleEvent_eventPromise.set(this, void 0);
    }
    async init(client) {
        const eName = this.eventName || 'firstMeaningfulPaint';
        const { Page } = client;
        await Page.setLifecycleEventsEnabled({ enabled: true });
        __classPrivateFieldSet(this, _LifecycleEvent_eventPromise, new Promise((resolve) => {
            Page.lifecycleEvent((args) => {
                if (args.name === eName) {
                    resolve();
                }
            });
        }), "f");
    }
    async wait(_client) {
        return Promise.race([
            __classPrivateFieldGet(this, _LifecycleEvent_eventPromise, "f"),
            new Promise((_, reject) => setTimeout(() => reject(new Error(this.timeoutMessage)), this.timeout)),
        ]);
    }
}
exports.LifecycleEvent = LifecycleEvent;
_LifecycleEvent_eventPromise = new WeakMap();
//# sourceMappingURL=LifecycleEvent.js.map